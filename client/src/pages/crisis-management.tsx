import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import {
  Shield,
  AlertTriangle,
  Siren,
  Eye,
  Lock,
  Zap,
  Activity,
  Clock,
  CheckCircle,
  XCircle,
  Flag,
  Phone,
  MessageSquare,
  Users,
  Globe,
  Server,
  Database,
  Bot,
  TrendingUp,
  AlertCircle,
  BarChart3,
  Settings,
  Play,
  Pause,
  RotateCcw,
  Plus,
  Search,
  Filter,
} from "lucide-react";

interface CrisisEvent {
  id: string;
  title: string;
  description: string;
  severity: "low" | "medium" | "high" | "critical";
  status: "active" | "investigating" | "resolving" | "resolved" | "escalated";
  category:
    | "security_breach"
    | "ddos_attack"
    | "content_violation"
    | "legal_threat"
    | "system_failure"
    | "data_leak"
    | "compliance_issue";
  platform: string;
  startTime: string;
  resolvedTime?: string;
  assignedTo: string;
  affectedUsers: number;
  responseActions: string[];
  escalationLevel: number;
  publicStatement?: string;
}

interface ResponsePlan {
  id: string;
  name: string;
  category: string;
  description: string;
  severity: string;
  autoTrigger: boolean;
  steps: string[];
  estimatedTime: string;
  responsibleTeam: string;
  lastUpdated: string;
  isActive: boolean;
}

interface ThreatAlert {
  id: string;
  alertType: "security" | "compliance" | "operational" | "legal" | "reputation";
  message: string;
  severity: "low" | "medium" | "high" | "critical";
  source: string;
  timestamp: string;
  status: "new" | "acknowledged" | "investigating" | "resolved";
  platform: string;
  autoGenerated: boolean;
}

export default function CrisisManagement() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedSeverity, setSelectedSeverity] = useState<string>("all");
  const [selectedStatus, setSelectedStatus] = useState<string>("all");

  // Mock crisis events
  const crisisEvents: CrisisEvent[] = [
    {
      id: "crisis_001",
      title: "Suspected Data Breach - GirlFanz Platform",
      description:
        "Unusual database access patterns detected on GirlFanz user data",
      severity: "critical",
      status: "investigating",
      category: "security_breach",
      platform: "GirlFanz",
      startTime: "2025-01-15T11:30:00Z",
      assignedTo: "security_team",
      affectedUsers: 25000,
      responseActions: [
        "Isolated affected database servers",
        "Activated incident response team",
        "Initiated forensic analysis",
        "Prepared user notification draft",
      ],
      escalationLevel: 3,
    },
    {
      id: "crisis_002",
      title: "DDoS Attack - FanzLab Main Portal",
      description:
        "High-volume traffic attack targeting main authentication servers",
      severity: "high",
      status: "resolving",
      category: "ddos_attack",
      platform: "FanzLab",
      startTime: "2025-01-15T10:45:00Z",
      assignedTo: "infrastructure_team",
      affectedUsers: 150000,
      responseActions: [
        "Activated DDoS protection",
        "Scaled infrastructure capacity",
        "Implemented traffic filtering",
        "Redirected traffic through CDN",
      ],
      escalationLevel: 2,
    },
    {
      id: "crisis_003",
      title: "DMCA Takedown Notice - TabooFanz",
      description: "Large-scale copyright infringement claims received",
      severity: "medium",
      status: "active",
      category: "legal_threat",
      platform: "TabooFanz",
      startTime: "2025-01-15T09:15:00Z",
      assignedTo: "legal_team",
      affectedUsers: 850,
      responseActions: [
        "Content review initiated",
        "Legal team consultation",
        "Creator notifications sent",
      ],
      escalationLevel: 1,
    },
    {
      id: "crisis_004",
      title: "Payment System Outage",
      description: "CCBill payment processing experiencing widespread failures",
      severity: "high",
      status: "resolved",
      category: "system_failure",
      platform: "All",
      startTime: "2025-01-14T16:20:00Z",
      resolvedTime: "2025-01-14T18:45:00Z",
      assignedTo: "payment_team",
      affectedUsers: 45000,
      responseActions: [
        "Switched to backup payment processor",
        "Notified affected users",
        "Coordinated with CCBill support",
        "Implemented payment retry logic",
      ],
      escalationLevel: 2,
      publicStatement:
        "Payment services have been fully restored. All pending transactions will be processed automatically.",
    },
  ];

  // Mock response plans
  const responsePlans: ResponsePlan[] = [
    {
      id: "plan_001",
      name: "Data Breach Response Protocol",
      category: "security_breach",
      description:
        "Comprehensive response plan for suspected or confirmed data breaches",
      severity: "critical",
      autoTrigger: true,
      steps: [
        "Immediate containment and isolation",
        "Forensic investigation initiation",
        "Legal and regulatory notification",
        "User communication and support",
        "Security audit and remediation",
      ],
      estimatedTime: "4-6 hours",
      responsibleTeam: "Security Team",
      lastUpdated: "2025-01-01T00:00:00Z",
      isActive: true,
    },
    {
      id: "plan_002",
      name: "DDoS Attack Mitigation",
      category: "ddos_attack",
      description:
        "Rapid response protocol for distributed denial of service attacks",
      severity: "high",
      autoTrigger: true,
      steps: [
        "Activate DDoS protection services",
        "Scale infrastructure capacity",
        "Implement traffic filtering",
        "Monitor and adjust defenses",
        "Post-incident analysis",
      ],
      estimatedTime: "1-2 hours",
      responsibleTeam: "Infrastructure Team",
      lastUpdated: "2025-01-01T00:00:00Z",
      isActive: true,
    },
    {
      id: "plan_003",
      name: "Legal Threat Management",
      category: "legal_threat",
      description:
        "Standard operating procedure for legal challenges and compliance issues",
      severity: "medium",
      autoTrigger: false,
      steps: [
        "Legal team assessment",
        "Evidence preservation",
        "Stakeholder notification",
        "Response strategy development",
        "Implementation and monitoring",
      ],
      estimatedTime: "2-4 days",
      responsibleTeam: "Legal Team",
      lastUpdated: "2025-01-01T00:00:00Z",
      isActive: true,
    },
    {
      id: "plan_004",
      name: "System Failure Recovery",
      category: "system_failure",
      description: "Emergency recovery procedures for critical system outages",
      severity: "high",
      autoTrigger: true,
      steps: [
        "System health assessment",
        "Failover to backup systems",
        "Root cause identification",
        "Service restoration",
        "Post-mortem analysis",
      ],
      estimatedTime: "30-90 minutes",
      responsibleTeam: "Operations Team",
      lastUpdated: "2025-01-01T00:00:00Z",
      isActive: true,
    },
  ];

  // Mock threat alerts
  const threatAlerts: ThreatAlert[] = [
    {
      id: "alert_001",
      alertType: "security",
      message: "Unusual login patterns detected from multiple IP ranges",
      severity: "high",
      source: "FanzShield Security System",
      timestamp: "2025-01-15T12:00:00Z",
      status: "new",
      platform: "All",
      autoGenerated: true,
    },
    {
      id: "alert_002",
      alertType: "compliance",
      message: "GDPR data subject access requests exceeding normal threshold",
      severity: "medium",
      source: "Compliance Monitoring",
      timestamp: "2025-01-15T11:45:00Z",
      status: "acknowledged",
      platform: "GirlFanz",
      autoGenerated: true,
    },
    {
      id: "alert_003",
      alertType: "operational",
      message: "Database performance degradation detected",
      severity: "medium",
      source: "System Monitoring",
      timestamp: "2025-01-15T11:30:00Z",
      status: "investigating",
      platform: "BoyFanz",
      autoGenerated: true,
    },
    {
      id: "alert_004",
      alertType: "reputation",
      message: "Negative sentiment spike detected on social media",
      severity: "low",
      source: "Social Media Monitor",
      timestamp: "2025-01-15T10:15:00Z",
      status: "resolved",
      platform: "FanzLab",
      autoGenerated: true,
    },
  ];

  const handleEscalateCrisis = useMutation({
    mutationFn: (crisisId: string) =>
      apiRequest("POST", `/api/crisis/${crisisId}/escalate`),
    onSuccess: (_, crisisId) => {
      queryClient.invalidateQueries({ queryKey: ["/api/crisis"] });
      const crisis = crisisEvents.find((c) => c.id === crisisId);
      toast({
        title: "Crisis escalated",
        description: `${crisis?.title} has been escalated to the next level`,
      });
    },
  });

  const handleResolveCrisis = useMutation({
    mutationFn: (crisisId: string) =>
      apiRequest("POST", `/api/crisis/${crisisId}/resolve`),
    onSuccess: (_, crisisId) => {
      queryClient.invalidateQueries({ queryKey: ["/api/crisis"] });
      const crisis = crisisEvents.find((c) => c.id === crisisId);
      toast({
        title: "Crisis resolved",
        description: `${crisis?.title} has been marked as resolved`,
      });
    },
  });

  const handleAcknowledgeAlert = useMutation({
    mutationFn: (alertId: string) =>
      apiRequest("POST", `/api/alerts/${alertId}/acknowledge`),
    onSuccess: (_, alertId) => {
      queryClient.invalidateQueries({ queryKey: ["/api/alerts"] });
      toast({
        title: "Alert acknowledged",
        description:
          "Alert has been acknowledged and assigned for investigation",
      });
    },
  });

  const getSeverityBadge = (severity: string) => {
    const variants = {
      low: "bg-blue-600",
      medium: "bg-yellow-600",
      high: "bg-orange-600",
      critical: "bg-red-600",
    } as const;

    return (
      <Badge
        className={variants[severity as keyof typeof variants] || "bg-gray-600"}
      >
        {severity.toUpperCase()}
      </Badge>
    );
  };

  const getStatusBadge = (status: string) => {
    const variants = {
      active: "bg-red-600",
      investigating: "bg-yellow-600",
      resolving: "bg-orange-600",
      resolved: "bg-green-600",
      escalated: "bg-purple-600",
      new: "bg-blue-600",
      acknowledged: "bg-yellow-600",
    } as const;

    return (
      <Badge
        className={variants[status as keyof typeof variants] || "bg-gray-600"}
      >
        {status.replace("_", " ").toUpperCase()}
      </Badge>
    );
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case "security_breach":
        return <Shield className="w-4 h-4" />;
      case "ddos_attack":
        return <Zap className="w-4 h-4" />;
      case "content_violation":
        return <Flag className="w-4 h-4" />;
      case "legal_threat":
        return <AlertTriangle className="w-4 h-4" />;
      case "system_failure":
        return <Server className="w-4 h-4" />;
      case "data_leak":
        return <Database className="w-4 h-4" />;
      case "compliance_issue":
        return <CheckCircle className="w-4 h-4" />;
      default:
        return <AlertCircle className="w-4 h-4" />;
    }
  };

  const getAlertIcon = (alertType: string) => {
    switch (alertType) {
      case "security":
        return <Shield className="w-4 h-4" />;
      case "compliance":
        return <CheckCircle className="w-4 h-4" />;
      case "operational":
        return <Server className="w-4 h-4" />;
      case "legal":
        return <AlertTriangle className="w-4 h-4" />;
      case "reputation":
        return <Users className="w-4 h-4" />;
      default:
        return <AlertCircle className="w-4 h-4" />;
    }
  };

  const filteredCrises = crisisEvents.filter((crisis) => {
    const matchesSeverity =
      selectedSeverity === "all" || crisis.severity === selectedSeverity;
    const matchesStatus =
      selectedStatus === "all" || crisis.status === selectedStatus;
    const matchesSearch =
      !searchQuery ||
      crisis.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      crisis.description.toLowerCase().includes(searchQuery.toLowerCase());

    return matchesSeverity && matchesStatus && matchesSearch;
  });

  const stats = {
    activeCrises: crisisEvents.filter(
      (c) =>
        c.status === "active" ||
        c.status === "investigating" ||
        c.status === "resolving",
    ).length,
    criticalCrises: crisisEvents.filter((c) => c.severity === "critical")
      .length,
    newAlerts: threatAlerts.filter((a) => a.status === "new").length,
    totalAffectedUsers: crisisEvents.reduce(
      (sum, c) => (c.status !== "resolved" ? sum + c.affectedUsers : sum),
      0,
    ),
  };

  return (
    <div className="min-h-screen cyber-bg">
      <div className="container mx-auto p-6 space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold cyber-text-glow">
              Crisis Management & Security Response
            </h1>
            <p className="text-muted-foreground">
              Enterprise-grade crisis response and threat management system
            </p>
          </div>
          <div className="flex items-center gap-3">
            <Badge
              variant="outline"
              className={`border-2 ${stats.activeCrises > 0 ? "border-red-500 text-red-400" : "border-green-500 text-green-400"}`}
            >
              <Siren className="w-4 h-4 mr-2" />
              {stats.activeCrises} Active Crisis
              {stats.activeCrises !== 1 ? "es" : ""}
            </Badge>
            <Button
              variant="destructive"
              data-testid="button-emergency-response"
            >
              <AlertTriangle className="w-4 h-4 mr-2" />
              Emergency Response
            </Button>
          </div>
        </div>

        {/* Alert Banner */}
        {stats.activeCrises > 0 && (
          <Card className="bg-red-900/20 border-red-500/50">
            <CardContent className="p-4">
              <div className="flex items-center gap-3">
                <Siren className="w-6 h-6 text-red-400 animate-pulse" />
                <div>
                  <p className="text-red-300 font-semibold">
                    {stats.activeCrises} Active Crisis
                    {stats.activeCrises !== 1 ? "es" : ""} Requiring Immediate
                    Attention
                  </p>
                  <p className="text-red-400 text-sm">
                    {stats.totalAffectedUsers.toLocaleString()} users
                    potentially affected
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Stats Overview */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <Card className="bg-gray-900/50 border-red-500/20">
            <CardContent className="p-4">
              <div className="flex items-center space-x-2">
                <AlertTriangle className="h-8 w-8 text-red-400" />
                <div>
                  <p className="text-sm font-medium">Active Crises</p>
                  <p className="text-2xl font-bold text-red-400">
                    {stats.activeCrises}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gray-900/50 border-orange-500/20">
            <CardContent className="p-4">
              <div className="flex items-center space-x-2">
                <Siren className="h-8 w-8 text-orange-400" />
                <div>
                  <p className="text-sm font-medium">Critical Level</p>
                  <p className="text-2xl font-bold text-orange-400">
                    {stats.criticalCrises}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gray-900/50 border-yellow-500/20">
            <CardContent className="p-4">
              <div className="flex items-center space-x-2">
                <AlertCircle className="h-8 w-8 text-yellow-400" />
                <div>
                  <p className="text-sm font-medium">New Alerts</p>
                  <p className="text-2xl font-bold text-yellow-400">
                    {stats.newAlerts}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gray-900/50 border-blue-500/20">
            <CardContent className="p-4">
              <div className="flex items-center space-x-2">
                <Users className="h-8 w-8 text-blue-400" />
                <div>
                  <p className="text-sm font-medium">Affected Users</p>
                  <p className="text-2xl font-bold text-blue-400">
                    {(stats.totalAffectedUsers / 1000).toFixed(0)}K
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <Tabs defaultValue="crises" className="w-full">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="crises">Active Crises</TabsTrigger>
            <TabsTrigger value="alerts">Threat Alerts</TabsTrigger>
            <TabsTrigger value="plans">Response Plans</TabsTrigger>
            <TabsTrigger value="command">Command Center</TabsTrigger>
          </TabsList>

          <TabsContent value="crises" className="space-y-6">
            <Card className="bg-gray-900/50 border-cyan-500/20">
              <CardHeader>
                <CardTitle className="text-cyan-400">Crisis Events</CardTitle>
                <CardDescription>
                  Active and recent crisis events requiring management attention
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="flex flex-col md:flex-row gap-4 mb-6">
                  <div className="relative flex-1">
                    <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                    <Input
                      placeholder="Search crisis events..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="pl-10 bg-gray-800 border-gray-700"
                      data-testid="input-crisis-search"
                    />
                  </div>

                  <Select
                    value={selectedSeverity}
                    onValueChange={setSelectedSeverity}
                  >
                    <SelectTrigger className="w-[150px] bg-gray-800 border-gray-700">
                      <SelectValue placeholder="Filter by severity" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Severity</SelectItem>
                      <SelectItem value="low">Low</SelectItem>
                      <SelectItem value="medium">Medium</SelectItem>
                      <SelectItem value="high">High</SelectItem>
                      <SelectItem value="critical">Critical</SelectItem>
                    </SelectContent>
                  </Select>

                  <Select
                    value={selectedStatus}
                    onValueChange={setSelectedStatus}
                  >
                    <SelectTrigger className="w-[150px] bg-gray-800 border-gray-700">
                      <SelectValue placeholder="Filter by status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Status</SelectItem>
                      <SelectItem value="active">Active</SelectItem>
                      <SelectItem value="investigating">
                        Investigating
                      </SelectItem>
                      <SelectItem value="resolving">Resolving</SelectItem>
                      <SelectItem value="resolved">Resolved</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-4">
                  {filteredCrises.map((crisis) => (
                    <Card
                      key={crisis.id}
                      className={`bg-gray-800/50 border-l-4 ${
                        crisis.severity === "critical"
                          ? "border-l-red-500"
                          : crisis.severity === "high"
                            ? "border-l-orange-500"
                            : crisis.severity === "medium"
                              ? "border-l-yellow-500"
                              : "border-l-blue-500"
                      }`}
                    >
                      <CardContent className="p-4">
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex-1">
                            <div className="flex items-center gap-3 mb-2">
                              {getCategoryIcon(crisis.category)}
                              <h3 className="font-semibold text-white text-lg">
                                {crisis.title}
                              </h3>
                              {getSeverityBadge(crisis.severity)}
                              {getStatusBadge(crisis.status)}
                            </div>
                            <p className="text-gray-300 mb-3">
                              {crisis.description}
                            </p>
                            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 text-sm">
                              <div>
                                <p className="text-gray-400">Platform:</p>
                                <p className="text-white font-medium">
                                  {crisis.platform}
                                </p>
                              </div>
                              <div>
                                <p className="text-gray-400">Affected Users:</p>
                                <p className="text-white font-medium">
                                  {crisis.affectedUsers.toLocaleString()}
                                </p>
                              </div>
                              <div>
                                <p className="text-gray-400">Started:</p>
                                <p className="text-white font-medium">
                                  {new Date(crisis.startTime).toLocaleString()}
                                </p>
                              </div>
                              <div>
                                <p className="text-gray-400">Assigned To:</p>
                                <p className="text-white font-medium capitalize">
                                  {crisis.assignedTo.replace("_", " ")}
                                </p>
                              </div>
                            </div>
                            {crisis.responseActions.length > 0 && (
                              <div className="mt-3">
                                <p className="text-gray-400 text-sm mb-2">
                                  Response Actions:
                                </p>
                                <ul className="text-sm text-gray-300 space-y-1">
                                  {crisis.responseActions.map(
                                    (action, index) => (
                                      <li
                                        key={index}
                                        className="flex items-center gap-2"
                                      >
                                        <CheckCircle className="w-3 h-3 text-green-400" />
                                        {action}
                                      </li>
                                    ),
                                  )}
                                </ul>
                              </div>
                            )}
                          </div>
                          <div className="flex flex-col gap-2 ml-4">
                            {crisis.status !== "resolved" && (
                              <>
                                <Button
                                  size="sm"
                                  onClick={() =>
                                    handleEscalateCrisis.mutate(crisis.id)
                                  }
                                  disabled={handleEscalateCrisis.isPending}
                                  variant="destructive"
                                  data-testid={`button-escalate-${crisis.id}`}
                                >
                                  <AlertTriangle className="w-3 h-3 mr-1" />
                                  Escalate
                                </Button>
                                <Button
                                  size="sm"
                                  onClick={() =>
                                    handleResolveCrisis.mutate(crisis.id)
                                  }
                                  disabled={handleResolveCrisis.isPending}
                                  className="bg-green-600 hover:bg-green-700"
                                  data-testid={`button-resolve-${crisis.id}`}
                                >
                                  <CheckCircle className="w-3 h-3 mr-1" />
                                  Resolve
                                </Button>
                              </>
                            )}
                            <Button
                              size="sm"
                              variant="outline"
                              data-testid={`button-view-${crisis.id}`}
                            >
                              <Eye className="w-3 h-3 mr-1" />
                              Details
                            </Button>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="alerts" className="space-y-6">
            <Card className="bg-gray-900/50 border-cyan-500/20">
              <CardHeader>
                <CardTitle className="text-cyan-400">Threat Alerts</CardTitle>
                <CardDescription>
                  Real-time security and operational alerts
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="border rounded-lg bg-gray-800/50">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Alert</TableHead>
                        <TableHead>Type</TableHead>
                        <TableHead>Severity</TableHead>
                        <TableHead>Platform</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead>Time</TableHead>
                        <TableHead>Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {threatAlerts.map((alert) => (
                        <TableRow key={alert.id}>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              {getAlertIcon(alert.alertType)}
                              <div>
                                <p className="font-medium text-white">
                                  {alert.message}
                                </p>
                                <p className="text-xs text-gray-400">
                                  {alert.source}
                                </p>
                              </div>
                            </div>
                          </TableCell>
                          <TableCell>
                            <Badge variant="outline" className="capitalize">
                              {alert.alertType}
                            </Badge>
                          </TableCell>
                          <TableCell>
                            {getSeverityBadge(alert.severity)}
                          </TableCell>
                          <TableCell>
                            <Badge variant="outline">{alert.platform}</Badge>
                          </TableCell>
                          <TableCell>{getStatusBadge(alert.status)}</TableCell>
                          <TableCell className="text-sm text-gray-400">
                            {new Date(alert.timestamp).toLocaleString()}
                          </TableCell>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              {alert.status === "new" && (
                                <Button
                                  size="sm"
                                  onClick={() =>
                                    handleAcknowledgeAlert.mutate(alert.id)
                                  }
                                  disabled={handleAcknowledgeAlert.isPending}
                                  data-testid={`button-acknowledge-${alert.id}`}
                                >
                                  <CheckCircle className="w-3 h-3" />
                                </Button>
                              )}
                              <Button
                                size="sm"
                                variant="outline"
                                data-testid={`button-view-alert-${alert.id}`}
                              >
                                <Eye className="w-3 h-3" />
                              </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="plans" className="space-y-6">
            <Card className="bg-gray-900/50 border-cyan-500/20">
              <CardHeader>
                <CardTitle className="text-cyan-400">
                  Crisis Response Plans
                </CardTitle>
                <CardDescription>
                  Automated and manual crisis response procedures
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {responsePlans.map((plan) => (
                    <Card key={plan.id} className="bg-gray-800/50">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between mb-3">
                          <div>
                            <h3 className="font-semibold text-white">
                              {plan.name}
                            </h3>
                            <p className="text-sm text-gray-400">
                              {plan.description}
                            </p>
                          </div>
                          <div className="flex items-center gap-2">
                            {getSeverityBadge(plan.severity)}
                            {plan.autoTrigger && (
                              <Badge className="bg-blue-600">
                                <Bot className="w-3 h-3 mr-1" />
                                Auto
                              </Badge>
                            )}
                          </div>
                        </div>
                        <div className="space-y-2 text-sm">
                          <div className="flex justify-between">
                            <span className="text-gray-400">Team:</span>
                            <span className="text-white">
                              {plan.responsibleTeam}
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-400">
                              Estimated Time:
                            </span>
                            <span className="text-white">
                              {plan.estimatedTime}
                            </span>
                          </div>
                        </div>
                        <div className="mt-3">
                          <p className="text-xs text-gray-400 mb-2">
                            Response Steps:
                          </p>
                          <ul className="text-xs text-gray-300 space-y-1">
                            {plan.steps.slice(0, 3).map((step, index) => (
                              <li
                                key={index}
                                className="flex items-center gap-2"
                              >
                                <div className="w-2 h-2 bg-cyan-400 rounded-full" />
                                {step}
                              </li>
                            ))}
                            {plan.steps.length > 3 && (
                              <li className="text-gray-400">
                                +{plan.steps.length - 3} more steps...
                              </li>
                            )}
                          </ul>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="command" className="space-y-6">
            <Card className="bg-gray-900/50 border-cyan-500/20">
              <CardHeader>
                <CardTitle className="text-cyan-400">
                  Crisis Command Center
                </CardTitle>
                <CardDescription>
                  Centralized crisis management and coordination hub
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <Card className="bg-gray-800/50">
                    <CardHeader className="pb-3">
                      <CardTitle className="text-lg text-white flex items-center gap-2">
                        <Activity className="w-5 h-5" />
                        System Status
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3">
                        <div className="flex justify-between items-center">
                          <span className="text-sm text-gray-400">
                            Overall Health
                          </span>
                          <Badge className="bg-green-600">OPERATIONAL</Badge>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-sm text-gray-400">
                            Security Level
                          </span>
                          <Badge className="bg-orange-600">ELEVATED</Badge>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-sm text-gray-400">
                            Response Teams
                          </span>
                          <Badge className="bg-green-600">READY</Badge>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="bg-gray-800/50">
                    <CardHeader className="pb-3">
                      <CardTitle className="text-lg text-white flex items-center gap-2">
                        <BarChart3 className="w-5 h-5" />
                        Response Metrics
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-400">
                            Avg Response Time
                          </span>
                          <span className="text-white font-mono">4.2m</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-400">Resolution Rate</span>
                          <span className="text-green-400 font-mono">
                            96.8%
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-400">Escalation Rate</span>
                          <span className="text-yellow-400 font-mono">
                            8.4%
                          </span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="bg-gray-800/50">
                    <CardHeader className="pb-3">
                      <CardTitle className="text-lg text-white flex items-center gap-2">
                        <Phone className="w-5 h-5" />
                        Emergency Contacts
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-400">Security Team</span>
                          <Button
                            size="sm"
                            variant="outline"
                            className="h-6 px-2"
                          >
                            <Phone className="w-3 h-3" />
                          </Button>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-400">Legal Team</span>
                          <Button
                            size="sm"
                            variant="outline"
                            className="h-6 px-2"
                          >
                            <Phone className="w-3 h-3" />
                          </Button>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-400">PR Team</span>
                          <Button
                            size="sm"
                            variant="outline"
                            className="h-6 px-2"
                          >
                            <MessageSquare className="w-3 h-3" />
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                <div className="mt-6 text-center">
                  <p className="text-lg font-medium text-white mb-4">
                    Crisis Management Ready
                  </p>
                  <p className="text-gray-400 mb-6">
                    All systems operational with automated threat detection and
                    response capabilities active
                  </p>
                  <div className="flex justify-center gap-4">
                    <Button
                      className="bg-red-600 hover:bg-red-700"
                      data-testid="button-activate-emergency"
                    >
                      <Siren className="w-4 h-4 mr-2" />
                      Activate Emergency Protocol
                    </Button>
                    <Button variant="outline" data-testid="button-test-systems">
                      <Settings className="w-4 h-4 mr-2" />
                      Test Systems
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
