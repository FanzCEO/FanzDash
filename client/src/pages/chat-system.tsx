import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Send, Users, MessageCircle, Phone, Video, Settings } from \"lucide-react\";\n\ninterface ChatRoom {\n  id: string;\n  name: string;\n  type: 'direct' | 'group' | 'broadcast' | 'emergency';\n  participants: string[];\n  isActive: boolean;\n  createdAt: string;\n  lastMessage?: ChatMessage;\n}\n\ninterface ChatMessage {\n  id: string;\n  roomId: string;\n  senderId: string;\n  content: string;\n  messageType: 'text' | 'image' | 'file' | 'system';\n  attachmentUrl?: string;\n  isEdited: boolean;\n  isDeleted: boolean;\n  createdAt: string;\n  senderName?: string;\n}\n\ninterface User {\n  id: string;\n  username: string;\n  role: string;\n  isActive: boolean;\n}\n\nexport default function ChatSystem() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedRoom, setSelectedRoom] = useState<string | null>(null);\n  const [messageInput, setMessageInput] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const { data: rooms = [], isLoading: roomsLoading } = useQuery<ChatRoom[]>({\n    queryKey: [\"/api/chat/rooms\"],\n    refetchInterval: 3000, // Refresh every 3 seconds\n  });\n\n  const { data: messages = [], isLoading: messagesLoading } = useQuery<ChatMessage[]>({\n    queryKey: [\"/api/chat/messages\", selectedRoom],\n    enabled: !!selectedRoom,\n    refetchInterval: 1000, // Refresh every second for real-time feel\n  });\n\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({ roomId, content }: { roomId: string; content: string }) => {\n      return apiRequest(\"/api/chat/messages\", {\n        method: \"POST\",\n        body: JSON.stringify({ roomId, content, messageType: \"text\" }),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/chat/messages\", selectedRoom] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/chat/rooms\"] });\n      setMessageInput(\"\");\n      scrollToBottom();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Message Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createRoomMutation = useMutation({\n    mutationFn: async ({ name, type, participants }: { name: string; type: string; participants: string[] }) => {\n      return apiRequest(\"/api/chat/rooms\", {\n        method: \"POST\",\n        body: JSON.stringify({ name, type, participants }),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/chat/rooms\"] });\n      toast({\n        title: \"Room Created\",\n        description: \"Chat room has been created successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Room Creation Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (!messageInput.trim() || !selectedRoom) return;\n    \n    sendMessageMutation.mutate({\n      roomId: selectedRoom,\n      content: messageInput.trim(),\n    });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const getRoomTypeIcon = (type: string) => {\n    switch (type) {\n      case \"direct\":\n        return <MessageCircle className=\"w-4 h-4\" />;\n      case \"group\":\n        return <Users className=\"w-4 h-4\" />;\n      case \"broadcast\":\n        return <Phone className=\"w-4 h-4\" />;\n      case \"emergency\":\n        return <Video className=\"w-4 h-4 text-red-400\" />;\n      default:\n        return <MessageCircle className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getRoomTypeBadge = (type: string) => {\n    const colors = {\n      direct: \"bg-blue-500\",\n      group: \"bg-green-500\",\n      broadcast: \"bg-purple-500\",\n      emergency: \"bg-red-500\",\n    };\n    return <Badge className={`${colors[type as keyof typeof colors]} text-white text-xs`}>{type}</Badge>;\n  };\n\n  const formatTime = (dateString: string) => {\n    return new Date(dateString).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  const filteredRooms = rooms.filter(room => \n    room.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  if (roomsLoading) {\n    return (\n      <div className=\"min-h-screen bg-black p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-800 rounded w-1/3\"></div>\n          <div className=\"h-96 bg-gray-800 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <div className=\"border-b border-cyan-500/20 p-6\">\n        <h1 className=\"text-4xl font-bold bg-gradient-to-r from-cyan-400 to-blue-400 bg-clip-text text-transparent mb-2\">Communication Hub</h1>\n        <p className=\"text-cyan-100/80\">Secure admin and moderator communication system</p>\n      </div>\n\n      <div className=\"flex h-[calc(100vh-180px)]\">\n        {/* Sidebar - Chat Rooms */}\n        <div className=\"w-80 border-r border-cyan-500/20 bg-gray-900/30\">\n          <div className=\"p-4 border-b border-gray-700\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-lg font-semibold text-cyan-400\">Chat Rooms</h2>\n              <Button\n                size=\"sm\"\n                className=\"bg-cyan-600 hover:bg-cyan-700\"\n                onClick={() => createRoomMutation.mutate({\n                  name: \"New Discussion\",\n                  type: \"group\",\n                  participants: []\n                })}\n                data-testid=\"button-create-room\"\n              >\n                <Users className=\"w-3 h-3 mr-1\" />\n                New\n              </Button>\n            </div>\n            <Input\n              placeholder=\"Search rooms...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"bg-gray-800 border-gray-700 text-white\"\n              data-testid=\"input-search-rooms\"\n            />\n          </div>\n          \n          <ScrollArea className=\"h-full\">\n            <div className=\"p-2 space-y-1\">\n              {filteredRooms.map((room) => (\n                <div\n                  key={room.id}\n                  className={`p-3 rounded-lg cursor-pointer transition-colors ${\n                    selectedRoom === room.id \n                      ? \"bg-cyan-600/20 border border-cyan-500/30\" \n                      : \"hover:bg-gray-800/50\"\n                  }`}\n                  onClick={() => setSelectedRoom(room.id)}\n                  data-testid={`room-${room.id}`}\n                >\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <div className=\"flex items-center gap-2\">\n                      {getRoomTypeIcon(room.type)}\n                      <span className=\"font-medium text-sm truncate\">{room.name}</span>\n                    </div>\n                    {getRoomTypeBadge(room.type)}\n                  </div>\n                  \n                  {room.lastMessage && (\n                    <div className=\"text-xs text-gray-400 truncate\">\n                      {room.lastMessage.content}\n                    </div>\n                  )}\n                  \n                  <div className=\"flex justify-between items-center mt-2 text-xs text-gray-500\">\n                    <span>{room.participants.length} members</span>\n                    {room.lastMessage && (\n                      <span>{formatTime(room.lastMessage.createdAt)}</span>\n                    )}\n                  </div>\n                </div>\n              ))}\n              \n              {filteredRooms.length === 0 && (\n                <div className=\"text-center text-gray-400 py-8\">\n                  <MessageCircle className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                  <p>No chat rooms found</p>\n                </div>\n              )}\n            </div>\n          </ScrollArea>\n        </div>\n\n        {/* Main Chat Area */}\n        <div className=\"flex-1 flex flex-col\">\n          {selectedRoom ? (\n            <>\n              {/* Chat Header */}\n              <div className=\"p-4 border-b border-gray-700 bg-gray-900/30\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    {getRoomTypeIcon(rooms.find(r => r.id === selectedRoom)?.type || \"direct\")}\n                    <div>\n                      <h3 className=\"font-semibold text-white\">\n                        {rooms.find(r => r.id === selectedRoom)?.name}\n                      </h3>\n                      <p className=\"text-sm text-gray-400\">\n                        {rooms.find(r => r.id === selectedRoom)?.participants.length} members\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Button size=\"sm\" variant=\"outline\" className=\"border-gray-600\">\n                      <Phone className=\"w-4 h-4\" />\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" className=\"border-gray-600\">\n                      <Video className=\"w-4 h-4\" />\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" className=\"border-gray-600\">\n                      <Settings className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n\n              {/* Messages */}\n              <ScrollArea className=\"flex-1 p-4\">\n                <div className=\"space-y-4\">\n                  {messagesLoading ? (\n                    <div className=\"animate-pulse space-y-3\">\n                      {[...Array(5)].map((_, i) => (\n                        <div key={i} className=\"flex gap-3\">\n                          <div className=\"w-8 h-8 bg-gray-700 rounded-full\"></div>\n                          <div className=\"flex-1\">\n                            <div className=\"h-4 bg-gray-700 rounded w-1/4 mb-2\"></div>\n                            <div className=\"h-3 bg-gray-700 rounded w-3/4\"></div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : messages.length === 0 ? (\n                    <div className=\"text-center text-gray-400 py-16\">\n                      <MessageCircle className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n                      <p className=\"text-lg font-medium mb-2\">No messages yet</p>\n                      <p className=\"text-sm\">Start the conversation by sending a message</p>\n                    </div>\n                  ) : (\n                    messages.map((message) => (\n                      <div key={message.id} className=\"flex gap-3\" data-testid={`message-${message.id}`}>\n                        <Avatar className=\"w-8 h-8\">\n                          <AvatarFallback className=\"bg-cyan-600 text-white text-xs\">\n                            {message.senderName?.[0] || \"U\"}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <span className=\"font-medium text-sm text-white\">\n                              {message.senderName || \"Anonymous\"}\n                            </span>\n                            <span className=\"text-xs text-gray-500\">\n                              {formatTime(message.createdAt)}\n                            </span>\n                            {message.isEdited && (\n                              <Badge variant=\"secondary\" className=\"text-xs\">edited</Badge>\n                            )}\n                          </div>\n                          <div className=\"text-gray-100 text-sm\">\n                            {message.isDeleted ? (\n                              <span className=\"text-gray-500 italic\">Message deleted</span>\n                            ) : (\n                              message.content\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                  <div ref={messagesEndRef} />\n                </div>\n              </ScrollArea>\n\n              {/* Message Input */}\n              <div className=\"p-4 border-t border-gray-700 bg-gray-900/30\">\n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"Type your message...\"\n                    value={messageInput}\n                    onChange={(e) => setMessageInput(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    className=\"bg-gray-800 border-gray-700 text-white\"\n                    data-testid=\"input-message\"\n                  />\n                  <Button\n                    onClick={handleSendMessage}\n                    disabled={!messageInput.trim() || sendMessageMutation.isPending}\n                    className=\"bg-cyan-600 hover:bg-cyan-700\"\n                    data-testid=\"button-send-message\"\n                  >\n                    <Send className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </>\n          ) : (\n            <div className=\"flex-1 flex items-center justify-center text-gray-400\">\n              <div className=\"text-center\">\n                <MessageCircle className=\"w-24 h-24 mx-auto mb-4 opacity-30\" />\n                <h3 className=\"text-xl font-medium mb-2\">Select a chat room</h3>\n                <p className=\"text-sm\">Choose a room from the sidebar to start messaging</p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}"