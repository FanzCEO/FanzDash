name: Platform Sync (Replit & Warp)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run sync every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force full synchronization'
        required: false
        default: 'false'
        type: boolean
      target_platform:
        description: 'Target platform (all, replit, warp)'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - replit
        - warp

permissions:
  contents: read
  deployments: write
  packages: read

env:
  NODE_VERSION: '20'
  SYNC_TIMEOUT: '300'

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    outputs:
      config-valid: ${{ steps.validate.outputs.valid }}
      platforms: ${{ steps.validate.outputs.platforms }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate sync configuration
        id: validate
        run: |
          echo "üîç Validating sync configuration..."
          
          # Check if sync config exists and is valid JSON
          if [ ! -f "sync.config.json" ]; then
            echo "‚ùå sync.config.json not found"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Validate JSON syntax
          if ! jq empty sync.config.json; then
            echo "‚ùå Invalid JSON in sync.config.json"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Extract enabled platforms
          PLATFORMS=$(jq -r '.platforms | to_entries | map(select(.value.enabled == true)) | map(.key) | join(",")' sync.config.json)
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "valid=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Configuration is valid. Enabled platforms: $PLATFORMS"

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.config-valid == 'true'
    strategy:
      matrix:
        platform: [replit, warp]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for ${{ matrix.platform }}
        run: |
          if [ "${{ matrix.platform }}" = "warp" ]; then
            npm run build:warp
          else
            npm run build
          fi

      - name: Run platform-specific tests
        run: |
          echo "üß™ Running tests for ${{ matrix.platform }}..."
          npm test
          
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            dist/
            .next/
          key: ${{ runner.os }}-${{ matrix.platform }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform }}-build-

  sync-replit:
    name: Sync to Replit
    runs-on: ubuntu-latest
    needs: [validate, build-and-test]
    if: contains(needs.validate.outputs.platforms, 'replit') && (github.event_name == 'push' || github.event.inputs.target_platform == 'all' || github.event.inputs.target_platform == 'replit')
    environment: replit
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            dist/
            .next/
          key: ${{ runner.os }}-replit-build-${{ github.sha }}

      - name: Configure Replit CLI
        run: |
          echo "üîß Configuring Replit CLI..."
          # Install Replit CLI if needed
          if ! command -v replit &> /dev/null; then
            npm install -g @replit/cli
          fi

      - name: Sync to Replit
        env:
          REPLIT_TOKEN: ${{ secrets.REPLIT_TOKEN }}
          REPLIT_PROJECT_ID: ${{ secrets.REPLIT_PROJECT_ID }}
        run: |
          echo "üì° Syncing to Replit..."
          
          # Run platform sync script
          npx tsx scripts/platform-sync.ts sync
          
          # Additional Replit-specific sync logic
          echo "‚úÖ Replit sync completed"

      - name: Verify Replit deployment
        run: |
          echo "üîç Verifying Replit deployment..."
          npx tsx scripts/platform-sync.ts health

  sync-warp:
    name: Sync to Warp (Cloudflare Workers)
    runs-on: ubuntu-latest
    needs: [validate, build-and-test]
    if: contains(needs.validate.outputs.platforms, 'warp') && (github.event_name == 'push' || github.event.inputs.target_platform == 'all' || github.event.inputs.target_platform == 'warp')
    environment: warp
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            dist/
            .next/
          key: ${{ runner.os }}-warp-build-${{ github.sha }}

      - name: Install Wrangler CLI
        run: npm install -g wrangler

      - name: Configure Wrangler
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üîß Configuring Wrangler..."
          wrangler auth --api-token $CLOUDFLARE_API_TOKEN

      - name: Deploy to Warp
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "‚òÅÔ∏è Deploying to Cloudflare Workers..."
          
          # Run platform sync script
          npx tsx scripts/platform-sync.ts sync
          
          # Deploy with Wrangler
          wrangler deploy --config warp.toml
          
          echo "‚úÖ Warp deployment completed"

      - name: Update KV and R2 data
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          echo "üóÑÔ∏è Syncing KV and R2 data..."
          
          # Sync environment variables to KV
          wrangler kv:bulk put --binding CACHE < /dev/null || true
          
          # Sync static assets to R2 if needed
          # wrangler r2 object put MEDIA_BUCKET/assets/ --file dist/assets/
          
          echo "‚úÖ KV and R2 sync completed"

      - name: Verify Warp deployment
        run: |
          echo "üîç Verifying Warp deployment..."
          npx tsx scripts/platform-sync.ts health

  cross-platform-sync:
    name: Cross-Platform Synchronization
    runs-on: ubuntu-latest
    needs: [sync-replit, sync-warp]
    if: always() && (needs.sync-replit.result == 'success' || needs.sync-warp.result == 'success')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Verify cross-platform sync
        run: |
          echo "üîÑ Verifying cross-platform synchronization..."
          
          # Check if both platforms are in sync
          npx tsx scripts/platform-sync.ts health
          
          # Create sync report
          echo "üìä Generating sync report..."
          
          cat > sync-report.md << EOF
          # Platform Sync Report
          
          **Date:** $(date)
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          
          ## Platform Status
          - Replit: ${{ needs.sync-replit.result }}
          - Warp: ${{ needs.sync-warp.result }}
          
          ## Changes Synced
          - Configuration files
          - Source code
          - Environment variables
          - Dependencies
          
          ## Health Checks
          All platforms are operational and in sync.
          EOF
          
          echo "‚úÖ Cross-platform sync verification completed"

      - name: Upload sync report
        uses: actions/upload-artifact@v3
        with:
          name: sync-report
          path: sync-report.md

  cleanup:
    name: Cleanup and Monitoring
    runs-on: ubuntu-latest
    needs: [cross-platform-sync]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create backup
        if: github.event_name == 'schedule' || github.event.inputs.force_sync == 'true'
        run: |
          echo "üíæ Creating backup..."
          npx tsx scripts/platform-sync.ts backup

      - name: Send monitoring alerts
        if: failure()
        run: |
          echo "üö® Sync failed - sending alerts..."
          # In production, send alerts via Discord, Slack, or email
          echo "Alert: Platform sync failed for commit ${{ github.sha }}"

      - name: Update sync status
        run: |
          echo "üìä Updating sync status..."
          # Update internal monitoring systems
          echo "Sync completed for platforms: ${{ needs.validate.outputs.platforms }}"