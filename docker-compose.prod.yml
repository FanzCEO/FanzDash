version: '3.8'

services:
  # ==================== CORE SERVICES ====================
  
  # Main FanzDash Application with AI Ecosystem Manager
  fanzdash:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fanzdash-main
    ports:
      - "3030:3030"
      - "3031:3031"  # WebSocket port for real-time features
    environment:
      - NODE_ENV=production
      - PORT=3030
      - WEBSOCKET_PORT=3031
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/fanzdash
      - REDIS_URL=redis://redis:6379
      - AI_SERVICE_URL=http://ai-engine:8080
      - FINANCE_SERVICE_URL=http://finance-os:8081
      - MEDIA_SERVICE_URL=http://media-hub:8082
      - SECURITY_VAULT_URL=http://security-vault:8083
      - MONITORING_URL=http://monitoring:9090
    depends_on:
      - postgres
      - redis
      - ai-engine
      - finance-os
    volumes:
      - ./logs:/app/logs
      - fanzdash_data:/app/data
    restart: unless-stopped
    networks:
      - fanz-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3030/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # AI Engine Service (AI Ecosystem Manager)
  ai-engine:
    build:
      context: ./server/services/ai
      dockerfile: Dockerfile
    container_name: fanz-ai-engine
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/fanzdash
      - ML_MODEL_PATH=/models
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
    volumes:
      - ai_models:/models
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - fanz-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # FanzFinance OS Service
  finance-os:
    build:
      context: ./server/services/finance
      dockerfile: Dockerfile
    container_name: fanz-finance-os
    ports:
      - "8081:8081"
    environment:
      - NODE_ENV=production
      - PORT=8081
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/fanzdash
      - REDIS_URL=redis://redis:6379
      - ENCRYPTION_KEY=${FINANCE_ENCRYPTION_KEY}
      # Payment Gateway Configurations (per your rules)
      - CCBILL_CLIENT_ACCNUM=${CCBILL_CLIENT_ACCNUM}
      - CCBILL_CLIENT_SUBACC=${CCBILL_CLIENT_SUBACC}
      - CCBILL_DATALINK_USERNAME=${CCBILL_DATALINK_USERNAME}
      - CCBILL_DATALINK_PASSWORD=${CCBILL_DATALINK_PASSWORD}
      - SEGPAY_PACKAGE_ID=${SEGPAY_PACKAGE_ID}
      - SEGPAY_ACCESS_KEY=${SEGPAY_ACCESS_KEY}
      - EPOCH_COMPANY_ID=${EPOCH_COMPANY_ID}
      - EPOCH_USERNAME=${EPOCH_USERNAME}
      - EPOCH_PASSWORD=${EPOCH_PASSWORD}
      # Payout Providers
      - PAXUM_API_KEY=${PAXUM_API_KEY}
      - EPAYSERVICE_API_KEY=${EPAYSERVICE_API_KEY}
      - WISE_API_TOKEN=${WISE_API_TOKEN}
      # HMS (Host Merchant Services) Integration
      - HMS_API_KEY=${HMS_API_KEY}
      - HMS_MERCHANT_ID=${HMS_MERCHANT_ID}
    volumes:
      - finance_data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - fanz-network

  # MediaHub Service (with Starz Studio Integration)
  media-hub:
    build:
      context: ./server/services/media
      dockerfile: Dockerfile
    container_name: fanz-media-hub
    ports:
      - "8082:8082"
    environment:
      - NODE_ENV=production
      - PORT=8082
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/fanzdash
      - REDIS_URL=redis://redis:6379
      - STORAGE_PROVIDER=gcp
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - GCP_BUCKET_NAME=${GCP_BUCKET_NAME}
      - GCP_SERVICE_ACCOUNT_KEY=${GCP_SERVICE_ACCOUNT_KEY}
      - FFMPEG_PATH=/usr/bin/ffmpeg
      - AI_SERVICE_URL=http://ai-engine:8080
    volumes:
      - media_storage:/app/media
      - media_temp:/tmp/media
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - ai-engine
    restart: unless-stopped
    networks:
      - fanz-network
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'

  # Security Vault Service (Zero-Knowledge Vault)
  security-vault:
    build:
      context: ./server/services/security
      dockerfile: Dockerfile
    container_name: fanz-security-vault
    ports:
      - "8083:8083"
    environment:
      - NODE_ENV=production
      - PORT=8083
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/fanzdash
      - VAULT_ENCRYPTION_KEY=${VAULT_ENCRYPTION_KEY}
      - HSM_PROVIDER=${HSM_PROVIDER:-software}
      - COMPLIANCE_MODE=adult_entertainment
    volumes:
      - security_data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - fanz-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # ==================== DATABASE SERVICES ====================
  
  postgres:
    image: postgres:16-alpine
    container_name: fanz-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=fanzdash
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - fanz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: fanz-redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - fanz-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== MONITORING & OBSERVABILITY ====================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: fanz-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - fanz-network

  # Grafana for monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: fanz-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${DOMAIN_NAME:-localhost}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - fanz-network
    depends_on:
      - prometheus

  # Elasticsearch for log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: fanz-elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=fanz-logs
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - fanz-network

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: fanz-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - fanz-network

  # ==================== LOAD BALANCER & PROXY ====================
  
  nginx:
    image: nginx:alpine
    container_name: fanz-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - fanzdash
      - grafana
      - kibana
    restart: unless-stopped
    networks:
      - fanz-network

# ==================== VOLUMES ====================
volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  fanzdash_data:
  finance_data:
  security_data:
  media_storage:
  media_temp:
  ai_models:
  nginx_logs:

# ==================== NETWORKS ====================
networks:
  fanz-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16